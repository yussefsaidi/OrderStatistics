/* Order Statistics

 Testing time complexity of :
	- QuickSort
	- Quickselect algorithm with last element as pivot
	- Quickselect algorithm with median of medians used to find pivot
*/

#include<iostream>
#include<iterator>			//for vectors
#include<algorithm>			//for random numbers
#include<vector>			
#include <stdlib.h>			//for 
#include <chrono>			//for clock

using namespace std;
using namespace std::chrono;

//////////////////////////
// Prints out the vector
//////////////////////////
void print(vector<int> & v){
	cout << endl;
	for (int i = 0; i < v.size(); i++) {
		cout << v[i] << " ";
	}
}


//////////////////////////
// Swapping two elements 
//////////////////////////
void swap(int* a, int* b) {
	int t = *a;
	*a = *b;
	*b = t;
}


////////////////////////////////////////
// Median of Medians Algorithm without 
// partitioning and finding kth value
////////////////////////////////////////
int medianOfMedians(vector<int> & vec, int start, int end, int k){

	if (end - start < 6) {			//base case: when we have less than 6 numbers
		sort(vec.begin(), vec.end());
		return vec.at(vec.size() / 2);
	}

	vector<int> medians;			//holds all the medians

	for (int i = start; i < end; i += 5) {
		if (end - i < 6) {			//base case
			sort(vec.begin() + i, vec.end());
			medians.push_back(vec.at((i + end) / 2));
		}
		else {						
			sort(vec.begin() + i, vec.begin() + i + 5);
			medians.push_back(vec.at(i + 2));
		}
	}

	print(medians);
	int median = medianOfMedians(medians, 0, medians.size(), medians.size() / 2);	//Recurse to keep splitting in 5 and getting the median
	return median;
}


/////////////////////////////////////////////
//Function to partition smaller numbers to 
//left of pivot (median), and bigger numbers 
//to right of it (quick sort)
/////////////////////////////////////////////
int pivot(vector<int>& vec, int median, int start, int end){ 
	int left = start;
	int right = end - 1;
	int temp;

	while (left < right) {
		while (vec.at(left) < median && left <= right) 
			left++;
		while (vec.at(right) > median && right >= left) 
			right--;

		if (left > right) 
			break;
		else if 
			(vec.at(left) == vec.at(right)) { left++; continue; }
		
		//Swap
		temp = vec.at(left);
		vec.at(left) = vec.at(right);
		vec.at(right) = temp;
	}
	return right;
}


////////////////////////////////////////////
// Finding kth value
// to run it for Order Statistics, comment 
// out line 128 and uncomment lines 105-125
// to run it for quick select, comment 
// out lines 105-125 and uncomment line 128
////////////////////////////////////////////
int MoM(vector<int> & vec, int start, int end, int k){

	if (end - start < 10) {			//base case when we have less than 6 numbers
		sort(vec.begin() + start, vec.begin() + end);
		return vec.at(k);
	}

	vector<int> medians;
	for (int i = start; i < end; i += 5) {
		if (end - i < 10) {			//base case
			sort(vec.begin() + i, vec.begin() + end);
			medians.push_back(vec.at((i + end) / 2));
		}

		else {
			sort(vec.begin() + i, vec.begin() + i + 5);
			medians.push_back(vec.at(i + 2));
		}
	}

	int median = MoM(medians, 0, medians.size(), medians.size() / 2); //Recurse to keep splitting in 5 and getting the median
	
	int piv = pivot(vec, median, start, end);

	//we're using the last element as our pivot point
	//int piv = pivot(vec, vec[end-1], start, end);

	int length = piv - start + 1;
	if (k < length)
		return MoM(vec, start, piv, k);
	else if (k > length)
		return MoM(vec, piv + 1, end, k - length);
	else
		return vec[k];

}


////////////////////////////////////////////
//This function pivots at the last element; 
//elements smaller than the pivot are placed 
//on the left,  greater elements are placed 
//the right
////////////////////////////////////////////
int partition(vector<int> & vec, int low, int high) {

	int pivot = vec[high];					// last element as pivot
	int i = (low - 1);						// current index where next element smaller than pivot can be placed

	for (int j = low; j <= high - 1; j++) {	//goes up to element before pivot

		if (vec[j] <= pivot) {
			i++;	
			swap(&vec[i], &vec[j]);			//assures the left will always have elements <= pivot
		}
	}

	swap(&vec[i + 1], &vec[high]);			// in the end, i stores the position at which pivot should go

	return (i + 1);
}

int quickSort(vector<int> & vec, int s, int t, int k) {

	if (s < t) {
		int q = partition(vec, s, t);		//partions in "half"

		quickSort(vec, s, q - 1, k);			//left half	
		quickSort(vec, q + 1, t, k);			//right half
	}

	return vec[k];		
}


////////////////////////////////////////////
// to run it for Order Statistics, comment
// out line 194 and uncomment line 193
// to run it for quick sort, comment
// out line 194 and uncomment line 193
////////////////////////////////////////////
void runFiveTimes(vector<int>& vec) {
	int element;     // element in the range 0 to size of vec

	cout << "For vector size " << vec.size() << ":" << endl << endl;
	for (int i = 0; i < 5; i++) {
		auto start = high_resolution_clock::now();		//http://www.cplusplus.com/reference/chrono/high_resolution_clock/now/
		element = rand() % vec.size();

		cout << "\tElement " << element + 1 << ":";
		//cout << "\t\t" << MoM(vec, 0, vec.size(), element) << endl << endl;
		cout  << "\t\t" << quickSort(vec, 0, vec.size()-1, element) << endl << endl;

		auto end = high_resolution_clock::now();
		duration<double> totalTime = end - start;

		cout << "Total time: " << totalTime.count() << " seconds" << endl;
		cout << "\n\n";
	}

	vec.clear();	//vector gets emptied for the next iteration
}


///////////////////////////////////////////////
// Random values are generated for our vector
///////////////////////////////////////////////
void generateValues(vector<int> & vec, int size, int max) {
	int val;

	for (int i = 0; i < size; i++) {
		val = rand() % max;
		vec.push_back(val);
	}
}

void main(){
	vector<int> vec;

	cout << "\t\tFor N = 5000:" << endl << endl;
	generateValues(vec, 100, 5000);
	runFiveTimes(vec);
	generateValues(vec, 300, 5000);
	runFiveTimes(vec);
	generateValues(vec, 500, 5000);
	runFiveTimes(vec);
	generateValues(vec, 1000, 5000);
	runFiveTimes(vec);
	generateValues(vec, 2000, 5000);
	runFiveTimes(vec);
	generateValues(vec, 4000, 5000);
	runFiveTimes(vec);

	cout << "\t\tFor N = 8000:" << endl << endl;
	generateValues(vec, 100, 8000);
	runFiveTimes(vec);
	generateValues(vec, 300, 8000);
	runFiveTimes(vec);
	generateValues(vec, 500, 8000);
	runFiveTimes(vec);
	generateValues(vec, 1000, 8000);
	runFiveTimes(vec);
	generateValues(vec, 2000, 8000);
	runFiveTimes(vec);
	generateValues(vec, 4000, 8000);
	runFiveTimes(vec);


	cout << "\t\tFor N = 10000:" << endl << endl;
	generateValues(vec, 100, 10000);
	runFiveTimes(vec);
	generateValues(vec, 300, 10000);
	runFiveTimes(vec);
	generateValues(vec, 500, 10000);
	runFiveTimes(vec);
	generateValues(vec, 1000, 10000);
	runFiveTimes(vec);
	generateValues(vec, 2000, 10000);
	runFiveTimes(vec);
	generateValues(vec, 4000, 10000);
	runFiveTimes(vec);
	
	system("pause");
}
///////////////////////////////////////
